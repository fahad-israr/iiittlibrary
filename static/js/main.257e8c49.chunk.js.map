{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["LoginIndex","Loadable","loader","__webpack_require__","e","then","bind","loading","react_default","a","createElement","HomeIndex","Promise","all","SideBar","NavBar","BooksIndex","BooksInfoIndex","StudentsInfoIndex","ReturnIndex","StudentsIndex","NotFound","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isAuthenticated","handleUpdate","assertThisInitialized","setState","localStorage","setItem","JSON","stringify","getItem","p","z","parse","_this2","BrowserRouter","history","window","basename","process","updateRoutes","Switch","Route","exact","path","component","react_toastify_lib","className","toastClassName","progressClassName","render","Component","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kUAMMA,SAAaC,IAAS,CACxBC,OAAQ,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,WACdC,QAAS,kBAAMC,EAAAC,EAAAC,cAAA,oBAEbC,EAAYV,IAAS,CACvBC,OAAQ,kBAAMU,QAAAC,IAAA,CAAAV,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,WACdC,QAAS,kBAAMC,EAAAC,EAAAC,cAAA,mBAGbI,EAAUb,IAAS,CACrBC,OAAQ,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,WACdC,QAAS,kBAAMC,EAAAC,EAAAC,cAAA,mBAEbK,EAASd,IAAS,CACpBC,OAAQ,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,WACdC,QAAS,kBAAMC,EAAAC,EAAAC,cAAA,mBAGbM,EAAaf,IAAS,CACxBC,OAAQ,kBAAMU,QAAAC,IAAA,CAAAV,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,WACdC,QAAS,kBAAMC,EAAAC,EAAAC,cAAA,mBAEbO,EAAiBhB,IAAS,CAC5BC,OAAQ,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,WACdC,QAAS,kBAAMC,EAAAC,EAAAC,cAAA,mBAEbQ,EAAoBjB,IAAS,CAC/BC,OAAQ,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,WACdC,QAAS,kBAAMC,EAAAC,EAAAC,cAAA,mBAGbS,EAAclB,IAAS,CACzBC,OAAQ,kBAAMU,QAAAC,IAAA,CAAAV,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,WACdC,QAAS,kBAAMC,EAAAC,EAAAC,cAAA,mBAEbU,EAAgBnB,IAAS,CAC3BC,OAAQ,kBAAMU,QAAAC,IAAA,CAAAV,EAAAC,EAAA,GAAAD,EAAAC,EAAA,MAAAC,KAAAF,EAAAG,KAAA,WACdC,QAAS,kBAAMC,EAAAC,EAAAC,cAAA,mBAIbW,EAAWpB,IAAS,CACtBC,OAAQ,kBAAMC,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,WACdC,QAAS,kBAAMC,EAAAC,EAAAC,cAAA,mBA0EJY,cAlEX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACTC,iBAAiB,GAGrBR,EAAKS,aAAeT,EAAKS,aAAa1B,KAAlBkB,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KANVA,4EAWDQ,GACTL,KAAKQ,SAAS,CAACH,mBAAiB,WAAKI,aAAaC,QAAQ,SAASC,KAAKC,UAAU,CAACP,mEAQvF,GAAGI,aAAaI,QAAQ,UAAU,CACtB,IAAIC,EAAEL,aAAaI,QAAQ,UACvBE,EAAEJ,KAAKK,MAAMF,GACjBd,KAAKQ,SAAS,CAACH,gBAAgBU,EAAEV,oDAQpC,IAAAY,EAAAjB,KACL,OACIlB,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAeC,QAASC,OAAOD,QAASE,SAAUC,iBACjDtB,KAAKI,MAAMC,gBACRvB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACK,EAAD,CAAQkC,aAAcvB,KAAKM,eAC3BxB,EAAAC,EAAAC,cAACI,EAAD,MACAN,EAAAC,EAAAC,cAACwC,EAAA,EAAD,KAEA1C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW3C,IACjCH,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAOE,KAAK,QAAQC,UAAW3C,IAC/BH,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWtC,IAChCR,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,QAAQC,UAAWtC,IACrCR,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAWnC,IACjCX,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAOE,KAAK,YAAYC,UAAWlC,IACnCZ,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAWrC,IACjCT,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAOE,KAAK,aAAaC,UAAWpC,IACnCV,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjC,KAGjCb,EAAAC,EAAAC,cAAC6C,EAAA,eAAD,CAAiBC,UAAU,kBAAkBC,eAAe,YAAaC,kBAAkB,iBAGhGlD,EAAAC,EAAAC,cAACwC,EAAA,EAAD,KAEA1C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAOE,KAAK,SAASM,OAAS,kBAAMnD,EAAAC,EAAAC,cAACV,EAAD,CAAYiD,aAAcN,EAAKX,kBACnExB,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIM,OAAS,kBAAMnD,EAAAC,EAAAC,cAACV,EAAD,CAAYiD,aAAcN,EAAKX,kBACpExB,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjC,aA3D/BuC,aC5CEC,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCZNC,IAASN,OAAOnD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlE,KAAK,SAAAmE,GACjCA,EAAaC","file":"static/js/main.257e8c49.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Loadable from 'react-loadable';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport {ToastContainer} from \"react-toastify\";\nimport './App.css'\nconst LoginIndex = Loadable({\n    loader: () => import('./components/login/Index'),\n    loading: () => <div> </div>,\n});\nconst HomeIndex = Loadable({\n    loader: () => import('./components/home/Index'),\n    loading: () => <div> </div>,\n});\n\nconst SideBar = Loadable({\n    loader: () => import('./components/sideBar/Index'),\n    loading: () => <div> </div>,\n});\nconst NavBar = Loadable({\n    loader: () => import('./components/navbar/Index'),\n    loading: () => <div> </div>,\n});\n\nconst BooksIndex = Loadable({\n    loader: () => import('./components/books/Index'),\n    loading: () => <div> </div>,\n});\nconst BooksInfoIndex = Loadable({\n    loader: () => import('./components/booksinfo/Index'),\n    loading: () => <div> </div>,\n});\nconst StudentsInfoIndex = Loadable({\n    loader: () => import('./components/studentsinfo/Index'),\n    loading: () => <div> </div>,\n});\n\nconst ReturnIndex = Loadable({\n    loader: () => import('./components/return/Index'),\n    loading: () => <div> </div>,\n});\nconst StudentsIndex = Loadable({\n    loader: () => import('./components/students/Index'),\n    loading: () => <div> </div>,\n});\n\n\nconst NotFound = Loadable({\n    loader: () => import('./components/notfound/Index'),\n    loading: () => <div> </div>,\n});\n\n\n\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            isAuthenticated: false\n        };\n        \n        this.handleUpdate = this.handleUpdate.bind(this)\n    }\n\n \n\n    handleUpdate(isAuthenticated) {\n        this.setState({isAuthenticated},()=>{localStorage.setItem('dFauth',JSON.stringify({isAuthenticated}))});\n        \n    }\n\n\n\n    \ncomponentDidMount(){\n    if(localStorage.getItem('dFauth')){\n                let p=localStorage.getItem('dFauth');\n                let z=JSON.parse(p);\n                this.setState({isAuthenticated:z.isAuthenticated})\n            }\n                \n}\n\n\n                                \n\n    render() {\n        return (\n            <BrowserRouter history={window.history} basename={process.env.PUBLIC_URL}>\n            {this.state.isAuthenticated ?\n                <div>\n                    <NavBar updateRoutes={this.handleUpdate} />\n                    <SideBar/>\n                    <Switch>\n                        \n                    <Route exact path=\"/\" component={HomeIndex} />\n                    <Route path=\"/home\" component={HomeIndex} />\n                    <Route path=\"/books\" component={BooksIndex} />\n                    <Route exact path=\"/book\" component={BooksIndex} />\n                    <Route path=\"/return\" component={ReturnIndex} />\n                    <Route path=\"/students\" component={StudentsIndex} />\n                    <Route path=\"/book/*\" component={BooksInfoIndex} />\n                    <Route path=\"/student/*\" component={StudentsInfoIndex} />\n                     <Route exact path=\"*\" component={NotFound} />\n                    </Switch>\n                    \n                     <ToastContainer  className='toast-container' toastClassName=\"darkToast\"  progressClassName=\"progressbar\"  />\n                </div>\n                :\n                <Switch>\n\n                <Route path=\"/login\" render={ () => <LoginIndex updateRoutes={this.handleUpdate}/> } />\n                <Route exact path=\"/\" render={ () => <LoginIndex updateRoutes={this.handleUpdate}/> } />\n                <Route exact path=\"*\" component={NotFound} />   \n                </Switch>\n            }\n            </BrowserRouter>\n        );\n    }\n}\n//#test\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}